name: Build and push docker image
description: Build and push docker image to dockerhub and tag it based on the tag-name(e.g. dev, uat)
inputs:
  tag-name:
    required: true
    type: string
  token:
    description: GitHub token
    required: true
    type: string

runs:
  using: composite
  steps:
    - run: echo "VERSION=${{ fromJson($(jq -c . < package.json)).version }}" >> $GITHUB_ENV
      shell: bash

    - name: Check if tag already exists
      uses: mukunku/tag-exists-action@v1.2.0
      id: checkTag
      with:
        tag: "v${{ env.VERSION }}"

    - name: Create tag
      if: ${{ !steps.checkTag.outputs.exists }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/v${{ env.VERSION }}',
            sha: context.sha
          })

    - name: Generate build number
      uses: onyxmueller/build-tag-number@v1
      with:
        token: ${{ inputs.token }}

    - name: Get package.json version
      id: package
      run: echo 'version=${{ env.VERSION }}${{ inputs.tag-name == 'dev' && '-dev' || ''  }}-${{ env.BUILD_NUMBER }}' >> $GITHUB_OUTPUT
      shell: bash

    - name: Build docker image
      run: docker build -t ${{ env.DOCKER_USERNAME }}/gh-react-app:latest -t ${{ env.DOCKER_USERNAME }}/gh-react-app:${{ steps.package.outputs.version }} .
      shell: bash

    - name: Login to Dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Push imgae to Dockerhub
      run: |
        # skip :latest tagged image
        # docker push ${{ env.DOCKER_USERNAME }}/gh-react-app:latest
        docker push ${{ env.DOCKER_USERNAME }}/gh-react-app:${{ steps.package.outputs.version }}
      shell: bash

    - name: Print output
      run: |
        echo "Deploying..."
        echo "URL => https://${{ inputs.tag-name }}.example.com"
      shell: bash

    - name: Add run summary
      run: echo -e '### Deployed Successfully!\n\nURL => https://${{ inputs.tag-name }}.example.com\nDocker image version => ${{ steps.package.outputs.version }}' >> $GITHUB_STEP_SUMMARY
      shell: bash
